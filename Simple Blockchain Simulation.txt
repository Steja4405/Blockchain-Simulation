import hashlib
import time

class Block:
    def __init__(self, index, transactions, previous_hash):
        self.index = index
        self.timestamp = time.time()
        self.transactions = transactions
        self.previous_hash = previous_hash
        self.nonce = 0  # Used for proof of work
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        data = (str(self.index) + str(self.timestamp) + str(self.transactions) + str(self.previous_hash) + str(self.nonce)).encode()
        return hashlib.sha256(data).hexdigest()

    def mine_block(self, difficulty):
        target = '0' * difficulty
        while not self.hash.startswith(target):
            self.nonce += 1
            self.hash = self.calculate_hash()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 4  # Number of leading zeros required for proof-of-work

    def create_genesis_block(self):
        return Block(0, "Genesis Block", "0")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.mine_block(self.difficulty)
        self.chain.append(new_block)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                print(f"Block {current_block.index} hash is invalid.")
                return False

            if current_block.previous_hash != previous_block.hash:
                print(f"Block {current_block.index} previous hash is invalid.")
                return False

        return True

    def tamper_block(self, index, new_transactions):
        if 0 < index < len(self.chain):
            self.chain[index].transactions = new_transactions
            self.chain[index].hash = self.chain[index].calculate_hash()
            print(f"Block {index} has been tampered with!")
        else:
            print("\nInvalid block index.")

    def print_chain(self):
        for block in self.chain:
            
            print(f"Index: {block.index}")
            print(f"Timestamp: {block.timestamp}")
            print(f"Transactions: {block.transactions}")
            print(f"Hash: {block.hash}")
            print(f"Previous Hash: {block.previous_hash}\n")

# Example usage
if __name__ == "__main__":
    # Create blockchain
    my_blockchain = Blockchain()

    # Input loop for adding multiple blocks
    while True:
        print("\nEnter for the new block or type 'exit' to stop the block:")
        user_input = input().strip()

        if user_input.lower() == 'exit':
            break

        transactions = user_input.split(',')
        new_block = Block(len(my_blockchain.chain), transactions, my_blockchain.get_latest_block().hash)
        my_blockchain.add_block(new_block)
        print("Block added!")

    # Print blockchain
    print("\nBlockchain:")
    my_blockchain.print_chain()

    # Validate blockchain before tampering
    print("\nBlockchain valid?:", my_blockchain.is_chain_valid())

    # Tamper with a block
    print("\nTampering with block 1...")
    my_blockchain.tamper_block(1, ['Tampered'])

    # Print blockchain after tampering
    print("\nBlockchain after tampering:")
    my_blockchain.print_chain()

    # Validate blockchain after tampering
    print("\nBlockchain valid after tampering?:", my_blockchain.is_chain_valid())
    